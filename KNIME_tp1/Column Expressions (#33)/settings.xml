<?xml version="1.0" encoding="UTF-8"?>
<config xmlns="http://www.knime.org/2008/09/XMLConfig" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.knime.org/2008/09/XMLConfig http://www.knime.org/XMLConfig_2008_09.xsd" key="settings.xml">
    <entry key="node_file" type="xstring" value="settings.xml"/>
    <config key="flow_stack"/>
    <config key="internal_node_subsettings">
        <entry key="memory_policy" type="xstring" value="CacheSmallInMemory"/>
    </config>
    <config key="model">
        <config key="expressions">
            <config key="element 0">
                <entry key="expression" type="xstring" value="regexReplace(column(&quot;Data Rastreio&quot;), &quot;.*?(\\d{4}).*&quot;, &quot;$1&quot;)%%00010"/>
                <entry key="outputName" type="xstring" value="Ano"/>
                <config key="outputType">
                    <entry key="cell_class" type="xstring" value="org.knime.core.data.def.StringCell"/>
                    <entry key="is_null" type="xboolean" value="false"/>
                </config>
                <entry key="replaceColumn" type="xboolean" value="false"/>
                <entry key="isCollection" type="xboolean" value="false"/>
            </config>
            <config key="element 1">
                <entry key="expression" type="xstring" value="regexReplace(column(&quot;Data Rastreio&quot;), &quot;\\d{4}-(\\d{2})-\\d{2}&quot;, &quot;$1&quot;)"/>
                <entry key="outputName" type="xstring" value="Mês"/>
                <config key="outputType">
                    <entry key="cell_class" type="xstring" value="org.knime.core.data.def.StringCell"/>
                    <entry key="is_null" type="xboolean" value="false"/>
                </config>
                <entry key="replaceColumn" type="xboolean" value="false"/>
                <entry key="isCollection" type="xboolean" value="false"/>
            </config>
            <config key="element 2">
                <entry key="expression" type="xstring" value="// Primeiro, substituímos os separadores por hifens%%00010var dataCorrigida = replace(replace(column(&quot;Data Nascimento&quot;), &quot;\\&quot;, &quot;-&quot;), &quot;/&quot;, &quot;-&quot;);%%00010%%00010// Em seguida, verificamos se a data está no formato dd-MM-yyyy e normalizamos para yyyy-MM-dd%%00010if (regexMatcher(dataCorrigida, &quot;^\\d{2}-\\d{2}-\\d{4}$&quot;)) {%%00010    join(substr(dataCorrigida, 6, 4), &quot;-&quot;, substr(dataCorrigida, 3, 2), &quot;-&quot;, substr(dataCorrigida, 0, 2))%%00010} else {%%00010    dataCorrigida%%00010}"/>
                <entry key="outputName" type="xstring" value="Data Nascimento"/>
                <config key="outputType">
                    <entry key="cell_class" type="xstring" value="org.knime.core.data.def.StringCell"/>
                    <entry key="is_null" type="xboolean" value="false"/>
                </config>
                <entry key="replaceColumn" type="xboolean" value="true"/>
                <entry key="isCollection" type="xboolean" value="false"/>
            </config>
            <config key="element 3">
                <entry key="expression" type="xstring" value="if (isMissing(column(&quot;IMC&quot;))) {%%00010    // Se o valor for nulo, retorna null%%00010    null%%00010} else if (regexMatcher(column(&quot;IMC&quot;), &quot;^[NS].*&quot;)) {%%00010    // Se o valor começar com &quot;N&quot; ou &quot;S&quot;, mantém apenas a primeira letra%%00010    substr(column(&quot;IMC&quot;), 0, 1)%%00010} else {%%00010    // Se não começar com &quot;N&quot; ou &quot;S&quot;, retorna null%%00010    null%%00010}"/>
                <entry key="outputName" type="xstring" value="IMC"/>
                <config key="outputType">
                    <entry key="cell_class" type="xstring" value="org.knime.core.data.def.StringCell"/>
                    <entry key="is_null" type="xboolean" value="false"/>
                </config>
                <entry key="replaceColumn" type="xboolean" value="true"/>
                <entry key="isCollection" type="xboolean" value="false"/>
            </config>
            <config key="element 4">
                <entry key="expression" type="xstring" value="if (isMissing(column(&quot;Conhece Unidade&quot;))) {%%00010    // Se o valor for nulo, retorna null%%00010    null%%00010} else if (regexMatcher(column(&quot;Conhece Unidade&quot;), &quot;^[NS].*&quot;)) {%%00010    // Se o valor começar com &quot;N&quot; ou &quot;S&quot;, mantém apenas a primeira letra%%00010    substr(column(&quot;Conhece Unidade&quot;), 0, 1)%%00010} else {%%00010    // Se não começar com &quot;N&quot; ou &quot;S&quot;, retorna null%%00010    null%%00010}"/>
                <entry key="outputName" type="xstring" value="Conhece Unidade"/>
                <config key="outputType">
                    <entry key="cell_class" type="xstring" value="org.knime.core.data.def.StringCell"/>
                    <entry key="is_null" type="xboolean" value="false"/>
                </config>
                <entry key="replaceColumn" type="xboolean" value="true"/>
                <entry key="isCollection" type="xboolean" value="false"/>
            </config>
            <config key="element 5">
                <entry key="expression" type="xstring" value="if (isMissing(column(&quot;TA&quot;))) {%%00010    // Se o valor for nulo, retorna null%%00010    null%%00010} else if (regexMatcher(column(&quot;TA&quot;), &quot;^[NS].*&quot;)) {%%00010    // Se o valor começar com &quot;N&quot; ou &quot;S&quot;, mantém apenas a primeira letra%%00010    substr(column(&quot;TA&quot;), 0, 1)%%00010} else {%%00010    // Se não começar com &quot;N&quot; ou &quot;S&quot;, retorna null%%00010    null%%00010}"/>
                <entry key="outputName" type="xstring" value="TA"/>
                <config key="outputType">
                    <entry key="cell_class" type="xstring" value="org.knime.core.data.def.StringCell"/>
                    <entry key="is_null" type="xboolean" value="false"/>
                </config>
                <entry key="replaceColumn" type="xboolean" value="true"/>
                <entry key="isCollection" type="xboolean" value="false"/>
            </config>
            <config key="element 6">
                <entry key="expression" type="xstring" value="if (isMissing(column(&quot;Colesterol&quot;))) {%%00010    // Se o valor for nulo, retorna null%%00010    null%%00010} else if (regexMatcher(column(&quot;Colesterol&quot;), &quot;^[NS].*&quot;)) {%%00010    // Se o valor começar com &quot;N&quot; ou &quot;S&quot;, mantém apenas a primeira letra%%00010    substr(column(&quot;Colesterol&quot;), 0, 1)%%00010} else {%%00010    // Se não começar com &quot;N&quot; ou &quot;S&quot;, retorna null%%00010    null%%00010}"/>
                <entry key="outputName" type="xstring" value="Colesterol"/>
                <config key="outputType">
                    <entry key="cell_class" type="xstring" value="org.knime.core.data.def.StringCell"/>
                    <entry key="is_null" type="xboolean" value="false"/>
                </config>
                <entry key="replaceColumn" type="xboolean" value="true"/>
                <entry key="isCollection" type="xboolean" value="false"/>
            </config>
            <config key="element 7">
                <entry key="expression" type="xstring" value="if (isMissing(column(&quot;Glicemia&quot;))) {%%00010    // Se o valor for nulo, retorna null%%00010    null%%00010} else if (regexMatcher(column(&quot;Glicemia&quot;), &quot;^[NS].*&quot;)) {%%00010    // Se o valor começar com &quot;N&quot; ou &quot;S&quot;, mantém apenas a primeira letra%%00010    substr(column(&quot;Glicemia&quot;), 0, 1)%%00010} else {%%00010    // Se não começar com &quot;N&quot; ou &quot;S&quot;, retorna null%%00010    null%%00010}"/>
                <entry key="outputName" type="xstring" value="Glicemia"/>
                <config key="outputType">
                    <entry key="cell_class" type="xstring" value="org.knime.core.data.def.StringCell"/>
                    <entry key="is_null" type="xboolean" value="false"/>
                </config>
                <entry key="replaceColumn" type="xboolean" value="true"/>
                <entry key="isCollection" type="xboolean" value="false"/>
            </config>
        </config>
        <entry key="count" type="xint" value="8"/>
        <entry key="failOnInvalidAccess" type="xboolean" value="true"/>
        <entry key="failOnScriptError" type="xboolean" value="false"/>
        <entry key="multiRowAccessWindowSize" type="xint" value="0"/>
        <entry key="multiRowAccessReturnFirstLastWhenOutOfBounds" type="xboolean" value="true"/>
    </config>
    <config key="nodeAnnotation">
        <entry key="text" type="xstring" value="Normalizar e corrigir dados"/>
        <entry key="contentType" type="xstring" value="text/plain"/>
        <entry key="bgcolor" type="xint" value="16777215"/>
        <entry key="x-coordinate" type="xint" value="0"/>
        <entry key="y-coordinate" type="xint" value="0"/>
        <entry key="width" type="xint" value="0"/>
        <entry key="height" type="xint" value="0"/>
        <entry key="alignment" type="xstring" value="CENTER"/>
        <entry key="borderSize" type="xint" value="0"/>
        <entry key="borderColor" type="xint" value="0"/>
        <entry key="defFontSize" type="xint" value="-1"/>
        <entry key="annotation-version" type="xint" value="20230412"/>
        <config key="styles"/>
    </config>
    <entry key="customDescription" type="xstring" isnull="true" value=""/>
    <entry key="state" type="xstring" value="EXECUTED"/>
    <entry key="factory" type="xstring" value="org.knime.expressions.base.node.formulas.FormulasNodeFactory"/>
    <entry key="node-name" type="xstring" value="Column Expressions"/>
    <entry key="node-bundle-name" type="xstring" value="KNIME Expression Nodes"/>
    <entry key="node-bundle-symbolic-name" type="xstring" value="org.knime.expressions.base"/>
    <entry key="node-bundle-vendor" type="xstring" value="KNIME AG, Zurich, Switzerland"/>
    <entry key="node-bundle-version" type="xstring" value="5.3.0.v202405071532"/>
    <entry key="node-feature-name" type="xstring" value="KNIME Column Expressions (Labs)"/>
    <entry key="node-feature-symbolic-name" type="xstring" value="org.knime.features.expressions.feature.group"/>
    <entry key="node-feature-vendor" type="xstring" value="KNIME AG, Zurich, Switzerland"/>
    <entry key="node-feature-version" type="xstring" value="5.3.0.v202406200655"/>
    <config key="factory_settings"/>
    <entry key="name" type="xstring" value="Column Expressions"/>
    <entry key="hasContent" type="xboolean" value="true"/>
    <entry key="isInactive" type="xboolean" value="false"/>
    <config key="ports">
        <config key="port_1">
            <entry key="index" type="xint" value="1"/>
            <entry key="port_spec_class" type="xstring" value="org.knime.core.data.DataTableSpec"/>
            <entry key="port_object_class" type="xstring" value="org.knime.core.node.BufferedDataTable"/>
            <entry key="port_object_summary" type="xstring" value="Rows: 12, Cols: 12"/>
            <entry key="port_dir_location" type="xstring" value="port_1"/>
        </config>
    </config>
    <config key="filestores">
        <entry key="file_store_location" type="xstring" isnull="true" value=""/>
        <entry key="file_store_id" type="xstring" value="6a61f8d6-b92c-458b-a546-3e3aa7bdb485"/>
    </config>
</config>
